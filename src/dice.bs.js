// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function incr(param) {
  switch (param) {
    case /* Red */0 :
        return /* Blue */1;
    case /* Blue */1 :
        return /* Green */2;
    case /* Green */2 :
        return /* Yellow */3;
    case /* Yellow */3 :
        return /* Red */0;
    
  }
}

function shuffle(t) {
  var random_shift = Random.$$int(4);
  var _side = t;
  var _num = random_shift;
  while(true) {
    var num = _num;
    var side = _side;
    if (num === 0) {
      return side;
    }
    _num = num - 1 | 0;
    _side = incr(side);
    continue ;
  };
}

function int_of(param) {
  return param;
}

function compare(a, b) {
  return b - a | 0;
}

var Side = {
  length: 4,
  empty: /* Red */0,
  incr: incr,
  shuffle: shuffle,
  int_of: int_of,
  compare: compare
};

function toggle(a) {
  if (a.TAG === /* Fixed */0) {
    return {
            TAG: /* Open */1,
            _0: a._0
          };
  } else {
    return {
            TAG: /* Fixed */0,
            _0: a._0
          };
  }
}

function update(fn, a) {
  if (a.TAG === /* Fixed */0) {
    return {
            TAG: /* Fixed */0,
            _0: a._0
          };
  } else {
    return {
            TAG: /* Open */1,
            _0: Curry._1(fn, a._0)
          };
  }
}

function extract(param) {
  return param._0;
}

var Fixable = {
  toggle: toggle,
  update: update,
  extract: extract
};

var empty_0 = {
  TAG: /* Open */1,
  _0: /* Red */0
};

var empty_1 = {
  hd: {
    TAG: /* Open */1,
    _0: /* Red */0
  },
  tl: {
    hd: {
      TAG: /* Open */1,
      _0: /* Red */0
    },
    tl: {
      hd: {
        TAG: /* Open */1,
        _0: /* Red */0
      },
      tl: {
        hd: {
          TAG: /* Open */1,
          _0: /* Red */0
        },
        tl: /* [] */0
      }
    }
  }
};

var empty = {
  hd: empty_0,
  tl: empty_1
};

function shuffle$1(param) {
  if (param) {
    return {
            hd: update(shuffle, param.hd),
            tl: shuffle$1(param.tl)
          };
  } else {
    return /* [] */0;
  }
}

function toggle$1(position, hand) {
  var go = function (index, param) {
    if (!param) {
      return /* [] */0;
    }
    var tail = param.tl;
    var side = param.hd;
    if (index === position) {
      return {
              hd: update(shuffle, side),
              tl: go(index + 1 | 0, tail)
            };
    } else {
      return {
              hd: side,
              tl: go(index + 1 | 0, tail)
            };
    }
  };
  return go(0, hand);
}

var Hand = {
  empty: empty,
  shuffle: shuffle$1,
  toggle: toggle$1
};

function map(fn, a) {
  if (a !== undefined) {
    return Caml_option.some(Curry._1(fn, Caml_option.valFromOption(a)));
  }
  
}

var Opt = {
  map: map
};

var Accumulator = $$Map.Make({
      compare: compare
    });

var empty$1 = Curry._3(Accumulator.add, /* Yellow */3, 0, Curry._3(Accumulator.add, /* Green */2, 0, Curry._3(Accumulator.add, /* Blue */1, 0, Curry._3(Accumulator.add, /* Red */0, 0, Accumulator.empty))));

function collect(hand) {
  var _acc = empty$1;
  var _param = hand;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (!param) {
      return acc;
    }
    var opt_incr = function (param) {
      return map((function (param) {
                    return 1 + param | 0;
                  }), param);
    };
    var key = param.hd._0;
    _param = param.tl;
    _acc = Curry._3(Accumulator.update, key, opt_incr, acc);
    continue ;
  };
}

var Counter = {
  Accumulator: Accumulator,
  empty: empty$1,
  collect: collect
};

exports.Side = Side;
exports.Fixable = Fixable;
exports.Hand = Hand;
exports.Opt = Opt;
exports.Counter = Counter;
/* Accumulator Not a pure module */
